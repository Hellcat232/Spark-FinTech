import { plaidWebhookQueue } from '../database/models/plaidWebhooksModel.js';
import { DwollaWebhoolQueue } from '../database/models/dwollaWebhookModel.js';
import { TransferCollection } from '../database/models/transfersModel.js';
import { UserRegisterCollection } from '../database/models/userModel.js';
import { fetchAssetReport } from './plaid/assets-service.js';
import { plaidClient } from '../thirdAPI/initPlaid.js';
import { makeTraceObj, mapStatus, isDwollaBankTransferDebit } from '../utils/transferTrace.js';
import {
  dwollaClient,
  updateDwollaWebhook,
  getDwollaWebhookSubscriptions,
} from '../thirdAPI/initDwolla.js';
import { env } from '../utils/env.js';

export const processWebhooksPlaid = async () => {
  const pendingWebhooks = await plaidWebhookQueue.find({ status: 'pending' });

  for (const webhook of pendingWebhooks) {
    try {
      console.log(`‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WebHook: ${webhook.webhook_type} - ${webhook.webhook_code}`);

      switch (webhook.webhook_type) {
        case 'ASSETS':
          await fetchAssetReport(webhook.asset_report_id);
          break;

        case 'TRANSACTIONS':
          // await processTransactionUpdate(webhook.payload);
          console.log(webhook);

          break;

        case 'IDENTITY':
          // await processIdentityUpdate(webhook.payload);
          console.log(webhook);
          break;

        case 'TRANSFER':
          if (webhook.webhook_code === 'TRANSFER_EVENTS_UPDATE') {
            const sync = await plaidClient.transferEventSync({
              after_id: 0,
            });
            //debit
            if (
              sync.data.transfer_events.at(0).transfer_type === 'debit' &&
              sync.data.transfer_events.at(0).event_type === 'pending'
            ) {
              // await plaidClient.sandboxTransferSimulate({
              //   transfer_id: sync.data.transfer_events.at(0).transfer_id,
              //   event_type: 'posted',
              //   failure_reason: sync.data.transfer_events.at(0).failure_reason,
              // });
            }
            if (
              sync.data.transfer_events.at(0).transfer_type === 'debit' &&
              sync.data.transfer_events.at(0).event_type === 'posted'
            ) {
              // await plaidClient.sandboxTransferSimulate({
              //   transfer_id: sync.data.transfer_events.at(0).transfer_id,
              //   event_type: 'settled',
              //   failure_reason: sync.data.transfer_events.at(0).failure_reason,
              // });
            }

            //credit
            if (
              sync.data.transfer_events.at(0).transfer_type === 'credit' &&
              sync.data.transfer_events.at(0).event_type === 'pending'
            ) {
              // await plaidClient.sandboxTransferSimulate({
              //   transfer_id: sync.data.transfer_events.at(0).transfer_id,
              //   event_type: 'posted',
              //   failure_reason: sync.data.transfer_events.at(0).failure_reason,
              // });
            }
            if (
              sync.data.transfer_events.at(0).transfer_type === 'credit' &&
              sync.data.transfer_events.at(0).event_type === 'posted'
            ) {
              // await plaidClient.sandboxTransferSimulate({
              //   transfer_id: sync.data.transfer_events.at(0).transfer_id,
              //   event_type: 'settled',
              //   failure_reason: sync.data.transfer_events.at(0).failure_reason,
              // });
            }
          }
          console.log(webhook);
          break;

        default:
          console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebHook: ${webhook.webhook_type}`);
      }

      // –ü–æ–º–µ—á–∞–µ–º WebHook –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
      await plaidWebhookQueue.updateOne({ _id: webhook._id }, { $set: { status: 'completed' } });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebHook:', error.message);
    }
  }
};

export const proccessWebhookDwolla = async () => {
  const pendingWebhooks = await DwollaWebhoolQueue.find({
    status: 'pending',
    signatureValid: true,
  });

  for (const webhook of pendingWebhooks) {
    try {
      // console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞: ${webhook.topic} | ${webhook.resourceId}`);

      const { topic, payload, resourceId } = webhook;

      switch (topic) {
        case 'customer_created': {
          console.log(`Dwolla customer "${resourceId}" created`);
          break;
        }
        case 'customer_verified': {
          const user = await UserRegisterCollection.findOne({
            dwollaCustomerURL: payload?._links?.customer?.href,
          });
          if (!user) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ${payload?._links?.customer?.href} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          await UserRegisterCollection.updateOne(
            { _id: user._id },
            {
              $set: {
                dwollaCustomerHasVerify: true,
              },
            },
          );

          break;
        }

        case 'customer_deactivated': {
          const user = await UserRegisterCollection.findOne({
            dwollaCustomerURL: payload?._links?.customer?.href,
          });
          if (user) {
            await UserRegisterCollection.updateOne(
              { _id: user._id },
              {
                $set: { dwollaCustomerDeactivated: true, dwollaCustomerHasVerify: false },
                $unset: { dwollaCustomerURL: 1 },
              },
            );
            console.log(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id}(${user.firstName}_${user.lastName}) —Å —Ç–∞–∫–∏–º ${payload?._links?.customer?.href} –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`,
            );
          } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id}(${user.firstName}_${user.lastName}) –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          break;
        }

        case 'customer_funding_source_added': {
          const user = await UserRegisterCollection.findOne({
            dwollaCustomerURL: payload?._links?.customer?.href,
          });
          if (user) {
            console.log(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è funding_source –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${user._id}(${user.firstName}_${user.lastName})`,
            );
          } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id}(${user.firstName}_${user.lastName}) –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          break;
        }
        case 'customer_funding_source_verified': {
          const user = await UserRegisterCollection.findOne({
            dwollaCustomerURL: payload?._links?.customer?.href,
          });
          if (user) {
            console.log(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è funding_source –±—ã–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${user._id}(${user.firstName}_${user.lastName})`,
            );
          } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id}(${user.firstName}_${user.lastName}) –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          break;
        }

        case 'customer_transfer_created':
          console.log(`üü° TRANSFER_CREATED: ${resourceId}`);
          break;

        case 'customer_transfer_completed': {
          console.log(`‚úÖ TRANSFER_COMPLETED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'settled' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'completed'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_transfer_failed': {
          console.log(`‚ùå TRANSFER_FAILED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'failed' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'failed'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_transfer_cancelled': {
          console.log(`üö´ TRANSFER_CANCELLED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'cancelled' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'cancelled'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_bank_transfer_created':
          console.log(`üè¶ BANK_TRANSFER_CREATED: ${resourceId}`);
          break;

        case 'customer_bank_transfer_completed': {
          console.log(`üí∞ BANK_TRANSFER_COMPLETED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'completed' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'completed'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_bank_transfer_failed': {
          console.log(`‚ùå BANK_TRANSFER_FAILED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'failed' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'failed'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_bank_transfer_cancelled': {
          console.log(`üö´ BANK_TRANSFER_CANCELLED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'cancelled' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'cancelled'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        default:
          console.log(`üîî –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π webhook: ${webhook.topic}`);
      }

      await DwollaWebhoolQueue.updateOne({ _id: webhook._id }, { $set: { status: 'completed' } });
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ Dwolla Webhook:', err.message);
    }
  }
};
