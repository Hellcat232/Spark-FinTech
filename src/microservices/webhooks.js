import { plaidWebhookQueue } from '../database/models/plaidWebhooksModel.js';
import { DwollaWebhoolQueue } from '../database/models/dwollaWebhookModel.js';
import { TransferCollection } from '../database/models/transfersModel.js';
import { UserRegisterCollection } from '../database/models/userModel.js';
import { fetchAssetReport } from './plaid/assets-service.js';
import { plaidClient } from '../thirdAPI/initPlaid.js';
import { makeTraceObj, mapStatus, isDwollaBankTransferDebit } from '../utils/transferTrace.js';
import {
  dwollaClient,
  updateDwollaWebhook,
  getDwollaWebhookSubscriptions,
} from '../thirdAPI/initDwolla.js';
import { dwollaGetTransferInfo } from './dwolla/dwolla-transfer-service.js';
import { env } from '../utils/env.js';
import { writeToTransferEventsDB } from '../utils/writeToTransferEventsDB.js';

export const processWebhooksPlaid = async () => {
  const pendingWebhooks = await plaidWebhookQueue.find({ status: 'pending' });

  for (const webhook of pendingWebhooks) {
    const {
      webhook_type,
      webhook_code,
      payload,
      asset_report_id,
      _id,
      item_id,
      userId,
      transferId,
    } = webhook;

    try {
      console.log(`‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Plaid WebHook: ${webhook_type} - ${webhook_code}`);

      switch (webhook_type) {
        case 'ASSETS': {
          if (webhook_code === 'PRODUCT_READY') {
            await fetchAssetReport(asset_report_id);
          } else {
            console.log(`üì¶ ASSETS ‚Üí ${webhook_code}`);
          }
          break;
        }

        case 'TRANSACTIONS': {
          if (webhook_code === 'INITIAL_UPDATE') {
            console.log('üßæ TRANSACTIONS ‚Üí Initial update');
          } else if (webhook_code === 'HISTORICAL_UPDATE') {
            console.log('üßæ TRANSACTIONS ‚Üí Historical update');
          } else if (webhook_code === 'DEFAULT_UPDATE') {
            console.log('üßæ TRANSACTIONS ‚Üí Default update');
          } else {
            console.log(`üßæ TRANSACTIONS ‚Üí ${webhook_code}`);
          }
          break;
        }

        case 'TRANSFER': {
          if (webhook_code === 'TRANSFER_EVENTS_UPDATE') {
            console.log('üîÑ TRANSFER ‚Üí Events update');
            await plaidWebhookQueue.updateMany(
              { webhook_code },
              {
                $unset: {
                  // userId: 1,
                  transaction_id: 1,
                  asset_report_id: 1,
                },
              },
            );

            const transferStatus = await plaidClient.transferGet({
              transfer_id: transferId,
            });
            await TransferCollection.updateOne(
              { transferId: transferStatus.data.transfer.id },
              {
                $set: {
                  plaidStatus: transferStatus.data.transfer.status,
                },
              },
            );
            // await syncTransferEvents(webhook.userId || null); // –µ—Å–ª–∏ userId –µ—Å—Ç—å ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º
          } else {
            console.log(`üîÑ TRANSFER ‚Üí ${webhook_code}`);
          }
          break;
        }

        case 'IDENTITY': {
          console.log(`ü™™ IDENTITY ‚Üí ${webhook_code}`);
          break;
        }

        case 'ITEM': {
          if (webhook_code === 'NEW_ACCOUNTS_AVAILABLE') {
            const user = await UserRegisterCollection.findOne({ plaidItemId: item_id });

            console.log(`New account for user ${user?._id} available`);
          }

          break;
        }

        default:
          console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π webhook_type: ${webhook_type}`);
      }

      await plaidWebhookQueue.updateOne({ _id }, { $set: { status: 'completed' } });
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ Plaid Webhook: ${err.message}`);
    }
  }
};

export const proccessWebhookDwolla = async () => {
  const pendingWebhooks = await DwollaWebhoolQueue.find({
    status: 'pending',
    signatureValid: true,
  });

  for (const webhook of pendingWebhooks) {
    try {
      // console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞: ${webhook.topic} | ${webhook.resourceId}`);

      const { topic, payload, resourceId } = webhook;

      switch (topic) {
        case 'customer_created': {
          console.log(`Dwolla customer "${resourceId}" created`);
          break;
        }
        case 'customer_verified': {
          const user = await UserRegisterCollection.findOne({
            dwollaCustomerURL: payload?._links?.customer?.href,
          });
          if (user) {
            await UserRegisterCollection.updateOne(
              { _id: user._id },
              {
                $set: {
                  dwollaCustomerHasVerify: true,
                },
              },
            );
          } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ${payload?._links?.customer?.href} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          break;
        }

        case 'customer_deactivated': {
          const user = await UserRegisterCollection.findOne({
            dwollaCustomerURL: payload?._links?.customer?.href,
          });
          if (user) {
            await UserRegisterCollection.updateOne(
              { _id: user._id },
              {
                $set: { dwollaCustomerDeactivated: true, dwollaCustomerHasVerify: false },
                $unset: { dwollaCustomerURL: 1 },
              },
            );
            console.log(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id}(${user.firstName}_${user.lastName}) —Å —Ç–∞–∫–∏–º ${payload?._links?.customer?.href} –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`,
            );
          } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id}(${user.firstName}_${user.lastName}) –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          break;
        }

        case 'customer_funding_source_added': {
          const user = await UserRegisterCollection.findOne({
            dwollaCustomerURL: payload?._links?.customer?.href,
          });
          if (user) {
            console.log(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è funding_source –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${user._id}(${user.firstName}_${user.lastName})`,
            );
          } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id}(${user.firstName}_${user.lastName}) –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          break;
        }
        case 'customer_funding_source_verified': {
          const user = await UserRegisterCollection.findOne({
            dwollaCustomerURL: payload?._links?.customer?.href,
          });
          if (user) {
            console.log(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è funding_source –±—ã–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${user._id}(${user.firstName}_${user.lastName})`,
            );
          } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id}(${user.firstName}_${user.lastName}) –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          break;
        }

        case 'customer_transfer_created':
          console.log(`üü° TRANSFER_CREATED: ${resourceId}`);
          break;

        case 'customer_transfer_completed': {
          console.log(`‚úÖ TRANSFER_COMPLETED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'settled' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'settled'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_transfer_failed': {
          console.log(`‚ùå TRANSFER_FAILED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'failed' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'failed'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_transfer_cancelled': {
          console.log(`üö´ TRANSFER_CANCELLED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'cancelled' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'cancelled'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_bank_transfer_created': {
          const info = await dwollaGetTransferInfo(webhook.resourceId);
          if (info) {
            await TransferCollection.updateOne(
              {
                dwollaTransferId: info?.body?.id,
              },
              {
                $set: {
                  dwollaStatus: info.body.status,
                  cancellable: true,
                },
              },
            );
          }

          // console.log('FROM customer_bank_transfer_created', info);

          console.log(`üè¶ BANK_TRANSFER_CREATED: ${resourceId}`);
          break;
        }

        case 'customer_bank_transfer_completed': {
          console.log(`üí∞ BANK_TRANSFER_COMPLETED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { transferId: transfer._id },
              { $set: { status: 'settled' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'settled'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_bank_transfer_failed': {
          console.log(`‚ùå BANK_TRANSFER_FAILED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'failed' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'failed'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        case 'customer_bank_transfer_cancelled': {
          console.log(`üö´ BANK_TRANSFER_CANCELLED: ${resourceId}`);

          const transfer = await TransferCollection.findOne({
            dwollaTransferId: resourceId,
          });
          if (transfer) {
            await TransferCollection.updateOne(
              { _id: transfer._id },
              { $set: { status: 'cancelled' } },
            );
            console.log(`üîÑ Transfer —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'cancelled'`);
          } else {
            console.warn(`‚ùó Transfer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è resourceId: ${resourceId}`);
          }

          break;
        }

        default:
          console.log(`üîî –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π webhook: ${webhook.topic}`);
      }

      await DwollaWebhoolQueue.updateOne({ _id: webhook._id }, { $set: { status: 'completed' } });
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ Dwolla Webhook:', err.message);
    }
  }
};
