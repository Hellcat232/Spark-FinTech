import axios from 'axios';
import FormData from 'form-data';
import fs from 'fs';
import { dwollaClient } from '../../thirdAPI/initDwolla.js';
import { plaidClient } from '../../thirdAPI/initPlaid.js';
import { UserRegisterCollection } from '../../database/models/userModel.js';
import createHttpError from 'http-errors';

export const createDwollaCastomer = async (userData) => {
  try {
    const user = {
      firstName: userData.firstName,
      lastName: userData.lastName,
      email: userData.email,
      type: 'personal',
      dateOfBirth: userData.dateOfBirth,
      address1: userData.address.street,
      city: userData.address.city,
      state: userData.address.state,
      postalCode: userData.address.postCode,
      ssn: userData.ssn,
    };

    const response = await dwollaClient.post('customers', user);
    return response.headers.get('Location');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Dwolla:', error);
    throw error;
  }
};

export const createDwollaCustomerKYC = async (user) => {
  try {
    // 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–µ—Ä–∞
    const res = await dwollaClient.post('customers', {
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      type: 'personal', // –∏–ª–∏ 'business'
      address1: user.address?.line1,
      city: user.address?.city,
      state: user.address?.state,
      postalCode: user.address?.zip,
      dateOfBirth: user.dob, // —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD
      ssn: user.ssnLast4, // —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
    });

    const customerUrl = res.headers.get('location');
    console.log('‚úÖ Customer created:', customerUrl);

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await UserRegisterCollection.findByIdAndUpdate(
      user._id,
      { $set: { dwollaCustomerUrl: customerUrl } },
      { new: true },
    );

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å ‚Äî –Ω—É–∂–Ω–æ –ª–∏ KYC
    const customerData = await dwollaClient.get(customerUrl);
    const { status } = customerData.body;

    if (status === 'document') {
      console.log('üìé –¢—Ä–µ–±—É–µ—Ç—Å—è KYC-–¥–æ–∫—É–º–µ–Ω—Ç');

      const formData = new FormData();
      formData.append('documentType', 'license'); // –∏–ª–∏ 'passport', 'idCard'
      formData.append('file', fs.createReadStream('./path/to/your/id.jpg'), 'id.jpg');

      const uploadRes = await axios.post(`${customerUrl}/documents`, formData, {
        headers: {
          ...formData.getHeaders(),
          Authorization: `Bearer ${dwollaClient.authToken}`,
        },
      });

      console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadRes.headers.location);
    } else {
      console.log('üë§ KYC-–¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
    }

    return customerUrl;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Dwolla –∫–∞—Å—Ç–æ–º–µ—Ä–∞:', error?.response?.data || error.message);
    throw error;
  }
};
