import dwolla from 'dwolla-v2';
import { env } from '../utils/env.js';
import { plaidClient } from './initPlaid.js';
import { BankAccountCollection } from '../database/models/accountsModel.js';
import { UserRegisterCollection } from '../database/models/userModel.js';

export const dwollaClient = new dwolla.Client({
  key: env('DWOLLA_CLIENT_KEY'),
  secret: env('DWOLLA_CLIENT_SECRET'),
  environment: env('DWOLLA_ENVIRONMENT'), // 'sandbox' –∏–ª–∏ 'production'
});

export const createProcessorTokenAndFundingSource = async (accessToken, userId) => {
  try {
    const { data } = await plaidClient.accountsGet({ access_token: accessToken });

    const { dwollaCustomerURL } = await UserRegisterCollection.findById(userId);

    const bankAccounts = [];

    for (const acc of data.accounts) {
      if (acc.type !== 'depository') continue;

      const processor = await plaidClient.processorTokenCreate({
        access_token: accessToken,
        account_id: acc.account_id,
        processor: 'dwolla',
      });

      let fundingSourceUrl = null;

      //–ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å funding source
      try {
        const response = await dwollaClient.post(`${dwollaCustomerURL}/funding-sources`, {
          plaidToken: processor.data.processor_token,
          name: acc.name || 'Bank Account',
        });
        fundingSourceUrl = response.headers.get('location');
      } catch (error) {
        //–û–±—Ä–∞–±–æ—Ç–∫–∞ DuplicateResource (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if (error.body?.code === 'DuplicateResource') {
          fundingSourceUrl = error?.body?._links?.about?.href;
          console.log('üîÅ Funding source —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π:', fundingSourceUrl);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è funding source:', error.body.message);
          throw error;
        }
      }

      bankAccounts.push({
        userId,
        accountId: acc.account_id,
        dwollaProcessorToken: processor.data.processor_token,
        fundingSourceURL: fundingSourceUrl,
        mask: acc.mask,
        name: acc.name,
        type: acc.type,
        subtype: acc.subtype,
      });
    }

    if (bankAccounts.length) {
      await BankAccountCollection.insertMany(bankAccounts);
      console.log('‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è processor token');
    }
  } catch (error) {
    console.log(
      '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è processor —Ç–æ–∫–µ–Ω–æ–≤ –∏ funding sources:',
      error.response?.data || error.message || error?.body?.message,
    );
  }
};

export const registerDwollaWebhook = async () => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    const response = await dwollaClient.get('webhook-subscriptions');
    const existing = response.body._embedded?.['webhook-subscriptions'] || [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ Webhook –Ω–∞ –Ω—É–∂–Ω—ã–π URL
    const webhookExists = existing.some((hook) => hook.url === env('DWOLLA_WEBHOOK_URL'));
    if (webhookExists) {
      console.log('‚úÖ Dwolla Webhook —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.');
      return;
    }

    // –ï—Å–ª–∏ Webhook –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º
    const createRes = await dwollaClient.post('webhook-subscriptions', {
      url: env('DWOLLA_WEBHOOK_URL'),
      secret: env('DWOLLA_WEBHOOK_SECRET'),
    });

    const webhookUrl = createRes.headers.get('location');
    console.log('‚úÖ Dwolla Webhook —Å–æ–∑–¥–∞–Ω:', webhookUrl);
  } catch (error) {
    console.log(error);

    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Dwolla Webhook:', error.response?.data || error.message);
  }
};

export const updateDwollaWebhook = async (webhookId, paused = false) => {
  try {
    const res = await dwollaClient.post(`webhook-subscriptions/${webhookId}`, { paused });

    console.log(`üîÑ Webhook ${webhookId} –æ–±–Ω–æ–≤–ª—ë–Ω: paused = ${paused}`);
    return res;
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Dwolla Webhook (${webhookId}):`,
      error?.response?.data || error.message,
    );
    throw error;
  }
};

export const getDwollaWebhookSubscriptions = async () => {
  try {
    const response = await dwollaClient.get('webhook-subscriptions');

    const webhooks = response.body._embedded?.['webhook-subscriptions'] || [];

    console.log(`üì¨ –ù–∞–π–¥–µ–Ω–æ ${webhooks.length} –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –≤–µ–±—Ö—É–∫–∏:\n`);

    for (const hook of webhooks) {
      console.log(`üß∑ ID: ${hook.id}`);
      console.log(`üåê URL: ${hook.url}`);
      console.log(`‚è∏Ô∏è Paused: ${hook.paused}`);
      console.log(`üìÖ Created: ${hook.created}`);
      console.log('----------------------------------');
    }

    return webhooks;
  } catch (error) {
    console.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ webhook-–ø–æ–¥–ø–∏—Å–æ–∫:',
      error?.response?.data || error.message,
    );
    return [];
  }
};
